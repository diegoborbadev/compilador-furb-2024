package main.java;

import AnalizadorLexico.LexicalError;
import AnalizadorLexico.Lexico;
import AnalizadorLexico.Token;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

public class interfac extends JFrame {

    private File currentFile;

    /**
     * Creates new form interfac
     */
    public interfac() {
        this.setTitle("Compilador");

        initComponents();
        postInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new JMenu();
        jScrollPane2 = new JScrollPane();
        jList1 = new JList<>();
        jProgressBar1 = new JProgressBar();
        jComboBox1 = new JComboBox<>();
        jInternalFrame1 = new JInternalFrame();
        jButton1 = new JButton();
        filler1 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 32767));
        filler2 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 32767));
        filler3 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 32767));
        jSplitPane1 = new JSplitPane();
        jScrollPane4 = new JScrollPane();
        jTextAreaStatus = new JTextArea();
        jScrollPaneMensagem = new JScrollPane();
        jTextArea2 = new JTextArea();
        jScrollPane3 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jScrollPane5 = new JScrollPane();
        jTextArea3 = new JTextArea();
        lbStatus = new JLabel();
        jMenuBar1 = new JMenuBar();
        jMenuNovo = new JMenu();
        jMenuabrir = new JMenu();
        jMenuSalvar = new JMenu();
        jMenuCopiar = new JMenu();
        jMenuColar = new JMenu();
        jMenuRecortar = new JMenu();
        jMenuCompilar = new JMenu();
        jMenuEquipe = new JMenu();

        jMenu1.setText("jMenu1");

        jList1.setModel(new AbstractListModel<String>() {
            String[] strings = {"Item 1", "Item 2", "Item 3", "Item 4", "Item 5"};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane2.setViewportView(jList1);

        jComboBox1.setModel(new DefaultComboBoxModel<>(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));

        jInternalFrame1.setVisible(true);

        GroupLayout jInternalFrame1Layout = new GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
                jInternalFrame1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
                jInternalFrame1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(910, 600));

        jButton1.setText("jButton1");

        jSplitPane1.setOrientation(JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setMinimumSize(new Dimension(37, 37));

        jTextAreaStatus.setEditable(false);
        jTextAreaStatus.setColumns(20);
        jTextAreaStatus.setRows(5);
        jTextAreaStatus.setAutoscrolls(false);
        jTextAreaStatus.setEnabled(false);
        jScrollPane4.setViewportView(jTextAreaStatus);

        jSplitPane1.setRightComponent(jScrollPane4);

        jScrollPaneMensagem.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneMensagem.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new Font("Courier New", 0, 12)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setMinimumSize(new Dimension(850, 150));
        jScrollPaneMensagem.setViewportView(jTextArea2);

        jSplitPane1.setBottomComponent(jScrollPaneMensagem);

        jScrollPane3.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jSplitPane1.setLeftComponent(jScrollPane3);

        jScrollPane5.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane5.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTextArea3.setColumns(20);
        jTextArea3.setFont(new Font("Courier New", 0, 12)); // NOI18N
        jTextArea3.setRows(16);
        jTextArea3.setMinimumSize(new Dimension(850, 250));
        jTextArea3.setBorder(new NumberedBorder());
        jScrollPane5.setViewportView(jTextArea3);

        jSplitPane1.setLeftComponent(jScrollPane5);

        lbStatus.setMinimumSize(new Dimension(900, 25));

        jMenuBar1.setBorder(null);
        jMenuBar1.setMinimumSize(new Dimension(900, 70));

        jMenuNovo.setBorder(BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), "novo [ctrl-n]", TitledBorder.CENTER, TitledBorder.ABOVE_BOTTOM));
        jMenuNovo.setIcon(new ImageIcon(getClass().getResource("/main/resources/images/novo.png"))); // NOI18N
        jMenuNovo.setText("novo [ctrl-n]");
        jMenuNovo.setToolTipText("novo");
        jMenuNovo.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        jMenuNovo.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuNovo.setHorizontalTextPosition(SwingConstants.RIGHT);
        jMenuNovo.setIconTextGap(5);
        jMenuNovo.setMaximumSize(new Dimension(115, 32767));
        jMenuNovo.setMinimumSize(new Dimension(115, 46));
        jMenuNovo.setName("novo"); // NOI18N
        jMenuNovo.setPreferredSize(new Dimension(100, 70));
        jMenuNovo.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jMenuNovoMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuNovo);

        jMenuabrir.setBorder(BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), "abrir [ctrl-o]", TitledBorder.CENTER, TitledBorder.ABOVE_BOTTOM));
        jMenuabrir.setIcon(new ImageIcon(getClass().getResource("/main/resources/images/abrir.png"))); // NOI18N
        jMenuabrir.setText("abrir [ctrl-o]");
        jMenuabrir.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuabrir.setHorizontalTextPosition(SwingConstants.RIGHT);
        jMenuabrir.setMaximumSize(new Dimension(115, 32767));
        jMenuabrir.setMinimumSize(new Dimension(115, 46));
        jMenuabrir.setName("novo"); // NOI18N
        jMenuabrir.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jMenuabrirMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuabrir);
        jMenuabrir.getAccessibleContext().setAccessibleName("                      novo");
        jMenuabrir.getAccessibleContext().setAccessibleDescription("novo");

        jMenuSalvar.setBorder(BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), "salvar [ctrl-s]", TitledBorder.CENTER, TitledBorder.ABOVE_BOTTOM));
        jMenuSalvar.setIcon(new ImageIcon(getClass().getResource("/main/resources/images/salvar.png"))); // NOI18N
        jMenuSalvar.setText("salvar [ctrl-s]");
        jMenuSalvar.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuSalvar.setHorizontalTextPosition(SwingConstants.RIGHT);
        jMenuSalvar.setIconTextGap(5);
        jMenuSalvar.setMaximumSize(new Dimension(115, 32767));
        jMenuSalvar.setMinimumSize(new Dimension(115, 46));
        jMenuSalvar.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jMenuSalvarMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuSalvar);

        jMenuCopiar.setBorder(BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), "copiar [ctrl-c]", TitledBorder.CENTER, TitledBorder.ABOVE_BOTTOM));
        jMenuCopiar.setIcon(new ImageIcon(getClass().getResource("/main/resources/images/copiar.png"))); // NOI18N
        jMenuCopiar.setText("copiar [ctrl-c]");
        jMenuCopiar.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuCopiar.setHorizontalTextPosition(SwingConstants.RIGHT);
        jMenuCopiar.setIconTextGap(5);
        jMenuCopiar.setMaximumSize(new Dimension(115, 32767));
        jMenuCopiar.setMinimumSize(new Dimension(115, 46));
        jMenuCopiar.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jMenuCopiarMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuCopiar);

        jMenuColar.setBorder(BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), "colar [ctrl-v]", TitledBorder.CENTER, TitledBorder.ABOVE_BOTTOM));
        jMenuColar.setIcon(new ImageIcon(getClass().getResource("/main/resources/images/colar.png"))); // NOI18N
        jMenuColar.setText("colar [ctrl-v]");
        jMenuColar.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuColar.setHorizontalTextPosition(SwingConstants.RIGHT);
        jMenuColar.setIconTextGap(5);
        jMenuColar.setMaximumSize(new Dimension(115, 32767));
        jMenuColar.setMinimumSize(new Dimension(115, 46));
        jMenuColar.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jMenuColarMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuColar);

        jMenuRecortar.setBorder(BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), "recortar [ctrl-x]", TitledBorder.CENTER, TitledBorder.ABOVE_BOTTOM));
        jMenuRecortar.setIcon(new ImageIcon(getClass().getResource("/main/resources/images/recortar.png"))); // NOI18N
        jMenuRecortar.setText("recortar [ctrl-x]");
        jMenuRecortar.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuRecortar.setHorizontalTextPosition(SwingConstants.RIGHT);
        jMenuRecortar.setIconTextGap(5);
        jMenuRecortar.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jMenuRecortarMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuRecortar);

        jMenuCompilar.setBorder(BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), "compilar [F7]", TitledBorder.CENTER, TitledBorder.ABOVE_BOTTOM));
        jMenuCompilar.setIcon(new ImageIcon(getClass().getResource("/main/resources/images/compilar.png"))); // NOI18N
        jMenuCompilar.setText("compilar [F7]");
        jMenuCompilar.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuCompilar.setHorizontalTextPosition(SwingConstants.RIGHT);
        jMenuCompilar.setIconTextGap(5);
        jMenuCompilar.setMaximumSize(new Dimension(115, 32767));
        jMenuCompilar.setMinimumSize(new Dimension(115, 46));
        jMenuCompilar.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jMenuCompilarMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuCompilar);

        jMenuEquipe.setBorder(BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), "equipe [F1]", TitledBorder.CENTER, TitledBorder.ABOVE_BOTTOM));
        jMenuEquipe.setIcon(new ImageIcon(getClass().getResource("/main/resources/images/equipe.png"))); // NOI18N
        jMenuEquipe.setText("equipe [F1]");
        jMenuEquipe.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuEquipe.setHorizontalTextPosition(SwingConstants.RIGHT);
        jMenuEquipe.setIconTextGap(5);
        jMenuEquipe.setMaximumSize(new Dimension(115, 32767));
        jMenuEquipe.setMinimumSize(new Dimension(115, 46));
        jMenuEquipe.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jMenuEquipeMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuEquipe);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE))
                                        .addComponent(lbStatus, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filler3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(filler2, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(filler1, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbStatus, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(filler1, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(filler3, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                                .addComponent(filler2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(535, 535, 535))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void postInit() {
        addKeyBind(jMenuNovo, KeyEvent.CTRL_DOWN_MASK, KeyEvent.VK_N);
        addKeyBind(jMenuabrir, KeyEvent.CTRL_DOWN_MASK, KeyEvent.VK_O);
        addKeyBind(jMenuSalvar, KeyEvent.CTRL_DOWN_MASK, KeyEvent.VK_S);
        addKeyBind(jMenuCompilar, KeyEvent.KEY_LOCATION_UNKNOWN, KeyEvent.VK_F7);
        addKeyBind(jMenuEquipe, KeyEvent.KEY_LOCATION_UNKNOWN, KeyEvent.VK_F1);
    }

    private static void addKeyBind(JMenu jMenu, int baseKey, int mainKey) {
        Optional<MouseListener> optionalMouseListener = Arrays.stream(jMenu.getMouseListeners())
                .filter(listener -> listener instanceof MouseAdapter && listener.getClass().getName().contains("$"))
                .findFirst();
        optionalMouseListener.ifPresent(mouseListener -> {
            jMenu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                    KeyStroke.getKeyStroke(mainKey, baseKey),
                    jMenu.toString()
            );
            jMenu.getActionMap().put(jMenu.toString(), new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jMenu.doClick();
                    mouseListener.mouseClicked(null);
                }
            });
        });
    }

    private void setCurrentFile(File file) {
        currentFile = file;
        lbStatus.setText(currentFile != null ? currentFile.getAbsolutePath() : "");
    }

    private void jMenuEquipeMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jMenuEquipeMouseClicked
        jTextArea2.setText("Equipe: Stephanie Possamai, Rian Gustavo Atanagildo e Diego Daniel Borba.");

    }//GEN-LAST:event_jMenuEquipeMouseClicked

    private static final List<String> verboseErrors = List.of("símbolo inválido", "palavra reservada inválida", "identificador inválido");

    private void jMenuCompilarMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jMenuCompilarMouseClicked
        Lexico lexico = new Lexico();
        lexico.setInput(getTextoEditor());
        try {
            try {
                TabelaTokens tabela = new TabelaTokens();
                Token t;
                while ((t = lexico.nextToken()) != null) {
                    int linha = getLinhaByLexeme(t.getLexeme());
                    if (t.getId() == 2) throw new LexicalError(verboseErrors.get(1), t.getLexeme(), t.getPosition());
                    tabela.adicionarToken(linha, classesId(t.getId()), t.getLexeme());
                }
                jTextArea2.setText(tabela.gerarTabela());
            } catch (LexicalError e) {
                StringBuilder erro = new StringBuilder();
                int linha = getLinhaByIndex(e.getPosition());
                erro.append("linha ").append(linha).append(": ");
                if (verboseErrors.contains(e.getMessage())) erro.append(e.getElement()).append(" ");
                erro.append(e.getMessage());
                jTextArea2.setText(erro.toString());
            }
        } catch (BadLocationException e) {
            jTextArea2.setText("Erro ao determinar a linha: " + e.getMessage());
        }


    }//GEN-LAST:event_jMenuCompilarMouseClicked

    private String getTextoEditor() {
        return jTextArea3.getText();
    }

    private int getLinhaByLexeme(String lexeme) throws BadLocationException {
        int index = getTextoEditor().indexOf(lexeme);
        return getLinhaByIndex(index);
    }

    private int getLinhaByIndex(int index) throws BadLocationException {
        return jTextArea3.getLineOfOffset(index) + 1;
    }

    private String classesId(Integer id) {
        switch (id) {
            case 16:
                return "identificador";
            case 17:
                return "constante_int";
            case 18:
                return "constante_float";
            case 19:
                return "constante_string";
            default:
                if (id >= 3 && id <= 15) {
                    return "palavra reservada";
                }
                if (id >= 20 && id <= 35) {
                    return "símbolo especial";
                }
                return "";
        }
    }

    private void jMenuNovoMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jMenuNovoMouseClicked
        jTextArea3.setText("");
        jTextArea2.setText("");
        setCurrentFile(null);
    }//GEN-LAST:event_jMenuNovoMouseClicked

    private void jMenuCopiarMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jMenuCopiarMouseClicked
        jTextArea3.copy();
    }//GEN-LAST:event_jMenuCopiarMouseClicked

    private void jMenuColarMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jMenuColarMouseClicked
        jTextArea3.paste();
    }//GEN-LAST:event_jMenuColarMouseClicked

    private void jMenuRecortarMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jMenuRecortarMouseClicked
        jTextArea3.cut();
    }//GEN-LAST:event_jMenuRecortarMouseClicked

    private JFileChooser instanceTextFileChooser(String dialogTitle) {
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setDialogTitle(dialogTitle);
        jFileChooser.setVisible(rootPaneCheckingEnabled);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
        jFileChooser.setFileFilter(filter);

        return jFileChooser;
    }

    private void jMenuabrirMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jMenuabrirMouseClicked
        JFileChooser jFileChooser1 = instanceTextFileChooser("Abrir");
        jFileChooser1.showOpenDialog(jTextArea3);

        if (jFileChooser1.isFileSelectionEnabled()) {
            jTextAreaStatus.setText("");
            setCurrentFile(jFileChooser1.getSelectedFile());
        }

        if (currentFile != null) {
            StringBuilder textoEditor = new StringBuilder();
            try {
                FileReader arq = new FileReader(currentFile);
                BufferedReader lerArq = new BufferedReader(arq);

                String linha;
                while ((linha = lerArq.readLine()) != null) {
                    if (!textoEditor.isEmpty()) {
                        textoEditor.append(System.lineSeparator());
                    }
                    textoEditor.append(linha);
                }

                lerArq.close();
                arq.close();
            } catch (IOException e) {
                System.err.println("Erro na leitura do arquivo" + e.getMessage());
            }

            jTextArea3.setText(textoEditor.toString());
        }
    }//GEN-LAST:event_jMenuabrirMouseClicked

    private void saveFile() {
        try (FileWriter fileWriter = new FileWriter(currentFile)) {
            fileWriter.write(jTextArea3.getText());
            JOptionPane.showMessageDialog(this, "Arquivo salvo com sucesso!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static String getFileExtension(File file) {
        if (file == null) {
            return null;
        }

        String fileName = file.getName();
        int lastIndexOfDot = fileName.lastIndexOf('.');
        return lastIndexOfDot > 0 && lastIndexOfDot < fileName.length() - 1
                ? fileName.substring(lastIndexOfDot + 1)
                : null;
    }

    private void jMenuSalvarMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jMenuSalvarMouseClicked
        if (currentFile == null) {
            JFileChooser fileChooser = instanceTextFileChooser("Salvar como");
            int userSelection = fileChooser.showSaveDialog(this);
            if (!(userSelection == JFileChooser.APPROVE_OPTION)) {
                return;
            }
            File file = fileChooser.getSelectedFile();
            String fileExtension = getFileExtension(file);
            if (fileExtension == null) {
                file = new File(file.getAbsolutePath() + ".txt");
            } else if (!fileExtension.equals("txt")) {
                JOptionPane.showMessageDialog(this, "Tipo de arquivo inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
                jMenuSalvarMouseClicked(evt);
                return;
            }
            setCurrentFile(file);
        }
        saveFile();
    }//GEN-LAST:event_jMenuSalvarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(interfac.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            Logger.getLogger(interfac.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            Logger.getLogger(interfac.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(interfac.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(() -> new interfac().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Box.Filler filler1;
    private Box.Filler filler2;
    private Box.Filler filler3;
    private JButton jButton1;
    private JComboBox<String> jComboBox1;
    private JInternalFrame jInternalFrame1;
    private JList<String> jList1;
    private JMenu jMenu1;
    private JMenuBar jMenuBar1;
    private JMenu jMenuColar;
    private JMenu jMenuCompilar;
    private JMenu jMenuCopiar;
    private JMenu jMenuEquipe;
    private JMenu jMenuNovo;
    private JMenu jMenuRecortar;
    private JMenu jMenuSalvar;
    private JMenu jMenuabrir;
    private JProgressBar jProgressBar1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JScrollPane jScrollPane4;
    private JScrollPane jScrollPane5;
    private JScrollPane jScrollPaneMensagem;
    private JSplitPane jSplitPane1;
    private JTextArea jTextArea1;
    private JTextArea jTextArea2;
    private JTextArea jTextArea3;
    private JTextArea jTextAreaStatus;
    private JLabel lbStatus;
    // End of variables declaration//GEN-END:variables
}
