package AnalizadorLexico;

public interface ParserConstants {
    int START_SYMBOL = 36;

    int FIRST_NON_TERMINAL = 36;
    int FIRST_SEMANTIC_ACTION = 69;

    int[][] PARSER_TABLE =
            {
                    {-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, 3, 2, -1, -1, -1, -1, 2, 2, 2, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, 7, -1, -1, -1, -1, 5, 6, 6, 8, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 10, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, 13, -1, -1},
                    {-1, -1, -1, -1, 17, -1, -1, -1, -1, 15, 16, 16, 18, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, -1, 41, 41, 41, 41, -1, -1, 41, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, 41, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, -1, 27, 27, 27, 27, -1, -1, 27, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, 27, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, 29},
                    {-1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, 31, -1, -1, -1, -1, 31, 31, 31, 31, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, 33, 32, 33, 33, -1, -1, 32, 32, 32, 32, 33, 33, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, 35, -1, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, 37, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, 42, -1, -1, -1, -1, 42, 42, 42, 42, -1, -1, 42, -1, -1, -1, 43, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, 42},
                    {-1, -1, -1, -1, -1, -1, -1, 47, 46, -1, -1, -1, -1, -1, -1, 45, 45, 45, 45, -1, -1, 48, -1, -1, -1, -1, 45, 45, -1, -1, -1, -1, -1, 45, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, 49, 49, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, 49, -1},
                    {-1, -1, -1, -1, 50, -1, -1, -1, -1, 50, 50, 50, 50, -1, -1, 50, -1, -1, -1, 50, 50, -1, 51, 51, 51, 51, -1, -1, -1, -1, 50, 50, -1, -1, 50},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, 54, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, -1, -1, -1, 56, -1},
                    {-1, -1, -1, -1, 57, -1, -1, -1, -1, 57, 57, 57, 57, -1, -1, 57, -1, -1, -1, 57, 57, -1, 57, 57, 57, 57, 58, 59, -1, -1, 57, 57, -1, -1, 57},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, -1, -1, -1, -1, 60, -1},
                    {-1, -1, -1, -1, 61, -1, -1, -1, -1, 61, 61, 61, 61, -1, -1, 61, -1, -1, -1, 61, 61, -1, 61, 61, 61, 61, 61, 61, 62, 63, 61, 61, -1, -1, 61},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 65, 66, 67, -1, -1, -1, -1, -1, -1, -1, 69, 70, -1, -1, -1, -1, -1, 68, -1}
            };

    int[][] PRODUCTIONS =
            {
                    {169, 3, 37, 4, 170},
                    {39, 32, 38},
                    {37},
                    {0},
                    {41, 40},
                    {45},
                    {49},
                    {52},
                    {57},
                    {171},
                    {33, 46, 172},
                    {16, 173, 42},
                    {31, 41},
                    {0},
                    {44},
                    {45},
                    {49},
                    {52},
                    {57},
                    {41, 33, 46, 172},
                    {10, 34, 47, 35},
                    {19, 175, 31, 16, 174, 48},
                    {16, 174, 48},
                    {31, 47},
                    {0},
                    {11, 34, 50, 35},
                    {12, 34, 50, 35, 176},
                    {46, 177, 51},
                    {31, 50},
                    {0},
                    {5, 46, 178, 53, 55, 179, 56, 180, 4},
                    {43, 32, 54},
                    {53},
                    {0},
                    {179, 6, 46, 181, 53, 55},
                    {0},
                    {7, 53},
                    {0},
                    {182, 13, 53, 58},
                    {15, 46, 183},
                    {14, 46, 184},
                    {60, 59},
                    {0},
                    {20, 60, 185, 59},
                    {21, 60, 186, 59},
                    {61},
                    {9, 187},
                    {8, 188},
                    {22, 60, 189},
                    {64, 62},
                    {0},
                    {63, 190, 64, 191},
                    {23},
                    {24},
                    {25},
                    {26},
                    {66, 65},
                    {0},
                    {27, 66, 192, 65},
                    {28, 66, 193, 65},
                    {68, 67},
                    {0},
                    {29, 68, 194, 67},
                    {30, 68, 195, 67},
                    {16, 196},
                    {17, 197},
                    {18, 198},
                    {19, 199},
                    {34, 46, 35},
                    {27, 68},
                    {28, 68, 200}
            };

    String[] PARSER_ERROR =
            {
                    "",
                    "esperado EOF",
                    "esperado palavra_reservada",
                    "esperado main",
                    "esperado end",
                    "esperado if",
                    "esperado elif",
                    "esperado else",
                    "esperado false",
                    "esperado true",
                    "esperado read",
                    "esperado write",
                    "esperado writeln",
                    "esperado repeat",
                    "esperado until",
                    "esperado while",
                    "esperado identificador",
                    "esperado constante_int",
                    "esperado constante_float",
                    "esperado constante_str",
                    "esperado &&",
                    "esperado ||",
                    "esperado !",
                    "esperado ==",
                    "esperado !=",
                    "esperado <",
                    "esperado >",
                    "esperado +",
                    "esperado -",
                    "esperado *",
                    "esperado /",
                    "esperado ,",
                    "esperado ;",
                    "esperado =",
                    "esperado (",
                    "esperado )",
                    "esperado main", //"<forma_geral> inválido",
                    "esperado identificador  read  write  writeln  if  repeat", //"<lista_instrucao> inválido",
                    "esperado end  if  read  write  writeln  repeat  identificador", //"<lista_instrucao1> inválido",
                    "esperado if  read  write  writeln  repeat  identificador", //"<instrucao> inválido",
                    "esperado ; =", //"<instrucao1> inválido",
                    "esperado identificador", //"<lista_id> inválido",
                    "esperado ,  ;  =", //"<lista_id1> inválido",
                    "esperado if  read  write writeln  repeat  identificador", //"<comando> inválido",
                    "esperado identificador", //"<com_atribuicao> inválido",
                    "esperado read", //"<com_entrada> inválido",
                    "esperado expressao", //"<expressao> inválido",
                    "esperado identificador  constante_String", //"<lista_entrada> inválido",
                    "esperado ,  )", //"<lista_entrada1> inválido",
                    "esperado write  writeln", //"<com_saida> inválido",
                    "esperado expressao", //"esperado expressao", //"<lista_expressoes> inválido",
                    "esperado ,  )", //"<lista_expressoes1> inválido",
                    "esperado if", //"<com_selecao> inválido",
                    "esperado if  read  write  writeln  repeat  identificador", //"<lista_comandos> inválido",
                    "esperado end  if  elif  else  read  write  writeln  repeat  until  while  identificador", //"<lista_comandos1> inválido",
                    "esperado end  elif  else", //"<elif> inválido",
                    "esperado end  else", //"<else> inválido",
                    "esperado repeat", //"<com_repeticao> inválido",
                    "esperado until  while", //"<com_repeticao1> inválido",
                    "esperado expressao", //"<expressao1> inválido",
                    "esperado expressao", //"<elemento> inválido",
                    "esperado expressao", //"<relacional> inválido",
                    "esperado expressao", //"<relacional1> inválido",
                    "esperado ==  !=  <   >", //"<operador_relacional> inválido",
                    "esperado expressao", //"<aritmetica> inválido",
                    "esperado expressao", //"<aritmetica1> inválido",
                    "esperado expressao", //"<termo> inválido",
                    "esperado expressao", //"<termo1> inválido",
                    "esperado expressao", //"<fator> inválido"
            };
}
